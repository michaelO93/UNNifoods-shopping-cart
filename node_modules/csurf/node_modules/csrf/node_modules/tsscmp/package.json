{
  "name": "tsscmp",
  "version": "1.0.5",
  "description": "Timing safe string compare using double HMAC",
  "main": "lib/index.js",
  "dependencies": {},
  "devDependencies": {},
  "scripts": {
    "test": "node test/unit && node test/benchmark"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/suryagh/tsscmp.git"
  },
  "keywords": [
    "timing safe string compare",
    "double hmac string compare",
    "safe string compare",
    "hmac"
  ],
  "author": {
    "name": "suryagh"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "engines": {
    "node": ">=0.6.x"
  },
  "license": "MIT",
  "readme": "# Timing safe string compare using double HMAC\n\n[![Node.js Version](https://img.shields.io/node/v/tsscmp.svg?style=flat-square)](https://nodejs.org/en/download)\n[![npm](https://img.shields.io/npm/v/tsscmp.svg?style=flat-square)](https://npmjs.org/package/tsscmp)\n[![NPM Downloads](https://img.shields.io/npm/dm/tsscmp.svg?style=flat-square)](https://npmjs.org/package/tsscmp)\n[![Build Status](https://img.shields.io/travis/suryagh/tsscmp/master.svg?style=flat-square)](https://travis-ci.org/suryagh/tsscmp)\n[![Build Status](https://img.shields.io/appveyor/ci/suryagh/tsscmp/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/suryagh/tsscmp)\n[![Dependency Status](http://img.shields.io/david/suryagh/tsscmp.svg?style=flat-square)](https://david-dm.org/suryagh/tsscmp)\n[![npm-license](http://img.shields.io/npm/l/tsscmp.svg?style=flat-square)](LICENSE)\n\n\nPrevents [timing attacks](http://codahale.com/a-lesson-in-timing-attacks/) using Brad Hill's\n[Double HMAC pattern](https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/)\nto perform secure string comparison. Double HMAC avoids the timing atacks by blinding the\ntiming channel using random time per attempt comparison against iterative brute force attacks.\n\n\n## Install\n\n```\nnpm install tsscmp\n```\n## Why\nTo compare secret values like **authentication tokens**, **passwords** or\n**capability urls** so that timing information is not\nleaked to the attacker.\n\n## Example\n\n```js\nvar timingSafeCompare = require('tsscmp');\n\nvar sessionToken = '127e6fbfe24a750e72930c';\nvar givenToken = '127e6fbfe24a750e72930c';\n\nif (timingSafeCompare(sessionToken, givenToken)) {\n  console.log('good token');\n} else {\n  console.log('bad token');\n}\n```\n##License: \n[MIT](LICENSE)\n\n**Credits to:**  [@jsha](https://github.com/jsha) |\n[@bnoordhuis](https://github.com/bnoordhuis) |\n[@suryagh](https://github.com/suryagh) |\n ",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/suryagh/tsscmp/issues"
  },
  "_id": "tsscmp@1.0.5",
  "_from": "tsscmp@1.0.5"
}
