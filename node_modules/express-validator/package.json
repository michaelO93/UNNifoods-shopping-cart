{
  "name": "express-validator",
  "description": "Express middleware for the validator module.",
  "author": {
    "name": "Christoph Tavan",
    "email": "dev@tavan.de"
  },
  "contributors": [
    {
      "name": "Chris O'Hara",
      "email": "cohara87@gmail.com"
    },
    {
      "name": "@orfaust"
    },
    {
      "name": "@zero21xxx"
    },
    {
      "name": "Roman Kalyakin",
      "email": "roman@kalyakin.com"
    },
    {
      "name": "Rusty Bailey",
      "email": "rustylbailey@gmail.com"
    }
  ],
  "version": "2.20.8",
  "homepage": "https://github.com/ctavan/express-validator",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/ctavan/express-validator.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "mocha",
    "jshint": "jshint ./test ./lib",
    "jscs": "jscs ./test ./lib",
    "travis-build": "npm test && npm run jshint && npm run jscs",
    "changelog": "github-changes -o ctavan -r express-validator -a -m YYYY/MM/DD --no-merges"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "dependencies": {
    "bluebird": "3.4.x",
    "lodash": "4.13.x",
    "validator": "5.4.x"
  },
  "devDependencies": {
    "body-parser": "1.12.3",
    "chai": "2.3.0",
    "express": "4.12.3",
    "github-changes": "1.0.2",
    "jscs": "1.13.1",
    "jshint": "2.7.0",
    "mocha": "2.2.4",
    "supertest": "0.15.0"
  },
  "keywords": [
    "express",
    "validator",
    "validation",
    "validate",
    "sanitize",
    "sanitization",
    "xss"
  ],
  "readme": "# express-validator\n\n[![npm version](https://badge.fury.io/js/express-validator.svg)](https://badge.fury.io/js/express-validator) [![Build Status](https://secure.travis-ci.org/ctavan/express-validator.png)](http://travis-ci.org/ctavan/express-validator) [![Dependency Status](https://david-dm.org/ctavan/express-validator.svg)](https://david-dm.org/ctavan/express-validator)\n\nAn [express.js]( https://github.com/visionmedia/express ) middleware for\n[node-validator]( https://github.com/chriso/validator.js ).\n\n## Installation\n\n```\nnpm install express-validator\n```\n\n## Usage\n\n```javascript\nvar util = require('util'),\n    express = require('express'),\n    expressValidator = require('express-validator'),\n    app = express.createServer();\n\napp.use(express.bodyParser());\napp.use(expressValidator([options])); // this line must be immediately after express.bodyParser()!\n\napp.post('/:urlparam', function(req, res) {\n\n  // VALIDATION\n  // checkBody only checks req.body; none of the other req parameters\n  // Similarly checkParams only checks in req.params (URL params) and\n  // checkQuery only checks req.query (GET params).\n  req.checkBody('postparam', 'Invalid postparam').notEmpty().isInt();\n  req.checkParams('urlparam', 'Invalid urlparam').isAlpha();\n  req.checkQuery('getparam', 'Invalid getparam').isInt();\n\n  // OR assert can be used to check on all 3 types of params.\n  // req.assert('postparam', 'Invalid postparam').notEmpty().isInt();\n  // req.assert('urlparam', 'Invalid urlparam').isAlpha();\n  // req.assert('getparam', 'Invalid getparam').isInt();\n\n  // SANITIZATION\n  // as with validation these will only validate the corresponding\n  // request object\n  req.sanitizeBody('postparam').toBoolean();\n  req.sanitizeParams('urlparam').toBoolean();\n  req.sanitizeQuery('getparam').toBoolean();\n\n  // OR find the relevent param in all areas\n  req.sanitize('postparam').toBoolean();\n\n  var errors = req.validationErrors();\n  if (errors) {\n    res.send('There have been validation errors: ' + util.inspect(errors), 400);\n    return;\n  }\n  res.json({\n    urlparam: req.params.urlparam,\n    getparam: req.params.getparam,\n    postparam: req.params.postparam\n  });\n});\n\napp.listen(8888);\n```\n\nWhich will result in:\n\n```\n$ curl -d 'postparam=1' http://localhost:8888/test?getparam=1\n{\"urlparam\":\"test\",\"getparam\":\"1\",\"postparam\":true}\n\n$ curl -d 'postparam=1' http://localhost:8888/t1est?getparam=1\nThere have been validation errors: [\n  { param: 'urlparam', msg: 'Invalid urlparam', value: 't1est' } ]\n\n$ curl -d 'postparam=1' http://localhost:8888/t1est?getparam=1ab\nThere have been validation errors: [\n  { param: 'getparam', msg: 'Invalid getparam', value: '1ab' },\n  { param: 'urlparam', msg: 'Invalid urlparam', value: 't1est' } ]\n\n$ curl http://localhost:8888/test?getparam=1&postparam=1\nThere have been validation errors: [\n  { param: 'postparam', msg: 'Invalid postparam', value: undefined} ]\n```\n\n### Middleware Options\n####`errorFormatter`\n_function(param,msg,value)_\n\nThe `errorFormatter` option can be used to specify a function that can be used to format the objects that populate the error array that is returned in `req.validationErrors()`. It should return an `Object` that has `param`, `msg`, and `value` keys defined.\n\n```javascript\n// In this example, the formParam value is going to get morphed into form body format useful for printing.\napp.use(expressValidator({\n  errorFormatter: function(param, msg, value) {\n      var namespace = param.split('.')\n      , root    = namespace.shift()\n      , formParam = root;\n\n    while(namespace.length) {\n      formParam += '[' + namespace.shift() + ']';\n    }\n    return {\n      param : formParam,\n      msg   : msg,\n      value : value\n    };\n  }\n}));\n```\n\n####`customValidators`\n_{ \"validatorName\": function(value, [additional arguments]), ... }_\n\n\nThe `customValidators` option can be used to add additional validation methods as needed. This option should be an `Object` defining the validator names and associated validation functions.\n\nDefine your custom validators:\n\n```javascript\napp.use(expressValidator({\n customValidators: {\n    isArray: function(value) {\n        return Array.isArray(value);\n    },\n    gte: function(param, num) {\n        return param >= num;\n    }\n }\n}));\n```\nUse them with their validator name:\n```javascript\nreq.checkBody('users', 'Users must be an array').isArray();\nreq.checkQuery('time', 'Time must be an integer great than or equal to 5').isInt().gte(5)\n```\n####`customSanitizers`\n_{ \"sanitizerName\": function(value, [additional arguments]), ... }_\n\nThe `customSanitizers` option can be used to add additional sanitizers methods as needed. This option should be an `Object` defining the sanitizer names and associated functions.\n\nDefine your custom sanitizers:\n\n```javascript\napp.use(expressValidator({\n customSanitizers: {\n    toSanitizeSomehow: function(value) {\n        var newValue = value;//some operations\n        return newValue;\n    },\n }\n}));\n```\nUse them with their sanitizer name:\n```javascript\nreq.sanitize('address').toSanitizeSomehow();\n```\n\n## Validation\n\n#### req.check();\n```javascript\n   req.check('testparam', 'Error Message').notEmpty().isInt();\n   req.check('testparam.child', 'Error Message').isInt(); // find nested params\n   req.check(['testparam', 'child'], 'Error Message').isInt(); // find nested params\n```\n\nStarts the validation of the specifed parameter, will look for the parameter in `req` in the order `params`, `query`, `body`, then validate, you can use 'dot-notation' or an array to access nested values.\n\nIf a validator takes in params, you would call it like `req.assert('reqParam').contains('thisString');`.\n\nValidators are appended and can be chained. See [chriso/validator.js](https://github.com/chriso/validator.js) for available validators, or [add your own](#customvalidators).\n\n#### req.assert();\nAlias for [req.check()](#reqcheck).\n\n#### req.validate();\nAlias for [req.check()](#reqcheck).\n\n#### req.checkBody();\nSame as [req.check()](#reqcheck), but only looks in `req.body`.\n\n#### req.checkQuery();\nSame as [req.check()](#reqcheck), but only looks in `req.query`.\n\n#### req.checkParams();\nSame as [req.check()](#reqcheck), but only looks in `req.params`.\n\n#### req.checkHeaders();\nOnly checks `req.headers`. This method is not covered by the general `req.check()`.\n\n## Asynchronous Validation\n\nIf you need to perform asynchronous validation, for example checking a database if a username has been taken already, your custom validator can return a promise.\n\nYou **MUST** use `asyncValidationErrors` which returns a promise to check for errors, otherwise the validator promises won't be resolved.\n\n *`asyncValidationErrors` will also return any regular synchronous validation errors.*\n\n ```javascript\napp.use(expressValidator({\n  customValidators: {\n    isUsernameAvailable: function(username) {\n      return new Promise(function(resolve, reject) {\n        User.findOne({ username: username })\n        .then(function(user) {\n          if (user) {\n            resolve(user);\n          }\n          else {\n            reject(user);\n          }\n        })\n        .catch(function(error){\n          if (error) {\n            reject(error);\n          }\n        });\n      });\n    }\n  }\n}));\n\nreq.check('username', 'Username Taken').isUsernameAvailable();\n\nreq.asyncValidationErrors()\n.then(function() {\n// create user\n})\n.catch(function(errors) {\n  res.send(errors);\n});\n\n```\n## Validation by Schema\n\nAlternatively you can define all your validations at once using a simple schema. This also enables per-validator error messages.\nSchema validation will be used if you pass an object to any of the validator methods.\n\n```javascript\nreq.checkBody({\n 'email': {\n    notEmpty: true,\n    isEmail: {\n      errorMessage: 'Invalid Email'\n    }\n  },\n  'password': {\n    notEmpty: true,\n    matches: {\n      options: ['example', 'i'] // pass options to the validator with the options property as an array\n      // options: [/example/i] // matches also accepts the full expression in the first parameter\n    },\n    errorMessage: 'Invalid Password' // Error message for the parameter\n  },\n  'name.first': { //\n    optional: true, // won't validate if field is empty\n    isLength: {\n      options: [{ min: 2, max: 10 }],\n      errorMessage: 'Must be between 2 and 10 chars long' // Error message for the validator, takes precedent over parameter message\n    },\n    errorMessage: 'Invalid First Name'\n  }\n});\n```\n\nYou can also define a specific location to validate against in the schema by adding `in` parameter as shown below:\n\n```javascript\nreq.check({\n 'email': {\n    in: 'query',\n    notEmpty: true,\n    isEmail: {\n      errorMessage: 'Invalid Email'\n    }\n  }\n});\n```\n\nPlease remember that the `in` attribute will have always highest priority. This mean if you use `in: 'query'` then checkQuery() will be called inside even if you do `checkParams()` or `checkBody()`. For example, all of these calls will check query params for email param:\n\n\n```javascript\nvar schema = {\n 'email': {\n    in: 'query',\n    notEmpty: true,\n    isEmail: {\n      errorMessage: 'Invalid Email'\n    }\n  },\n  'password': {\n    notEmpty: true,\n    matches: {\n      options: ['example', 'i'] // pass options to the validator with the options property as an array\n      // options: [/example/i] // matches also accepts the full expression in the first parameter\n    },\n    errorMessage: 'Invalid Password' // Error message for the parameter\n  }\n};\n\nreq.check(schema);        // will check 'password' no matter where it is but 'email' in query params\nreq.checkQuery(schema);   // will check 'password' and 'email' in query params\nreq.checkBody(schema);    // will check 'password' in body but 'email' in query params\nreq.checkParams(schema);  // will check 'password' in path params but 'email' in query params\n```\n\nCurrently supported location are `'body', 'params', 'query'`. If you provide a location parameter that is not supported, the validation process for current parameter will be skipped.\n\n## Validation errors\n\nYou have two choices on how to get the validation errors:\n\n```javascript\nreq.assert('email', 'required').notEmpty();\nreq.assert('email', 'valid email required').isEmail();\nreq.assert('password', '6 to 20 characters required').len(6, 20);\n\nvar errors = req.validationErrors(); // Or req.asyncValidationErrors();\nvar mappedErrors = req.validationErrors(true); // Or req.asyncValidationErrors(true);\n```\n\nerrors:\n\n```javascript\n[\n  {param: \"email\", msg: \"required\", value: \"<received input>\"},\n  {param: \"email\", msg: \"valid email required\", value: \"<received input>\"},\n  {param: \"password\", msg: \"6 to 20 characters required\", value: \"<received input>\"}\n]\n```\n\nmappedErrors:\n\n```javascript\n{\n  email: {\n    param: \"email\",\n    msg: \"valid email required\",\n    value: \"<received input>\"\n  },\n  password: {\n    param: \"password\",\n    msg: \"6 to 20 characters required\",\n    value: \"<received input>\"\n  }\n}\n```\n*Note: Using mappedErrors will only provide the last error per param in the chain of validation errors.*\n\n### Per-validation messages\n\nYou can provide an error message for a single validation with `.withMessage()`. This can be chained with the rest of your validation, and if you don't use it for one of the validations then it will fall back to the default.\n\n```javascript\nreq.assert('email', 'Invalid email')\n    .notEmpty().withMessage('Email is required')\n    .isEmail();\nvar errors = req.validationErrors();\n```\nerrors:\n\n```javascript\n[\n  {param: 'email', msg: 'Email is required', value: '<received input>'}\n  {param: 'email', msg: 'Invalid Email', value: '<received input>'}\n]\n```\n\n## Optional input\n\nYou can use the `optional()` method to skip validation. By default, it only skips validation if the key does not exist on the request object. If you want to skip validation based on the property being falsy (null, undefined, etc), you can pass in `{ checkFalsy: true }`.\n\n```javascript\nreq.checkBody('email').optional().isEmail();\n//if there is no error, req.body.email is either undefined or a valid mail.\n```\n\n## Sanitizer\n\n#### req.sanitize();\n```javascript\n\nreq.body.comment = 'a <span>comment</span>';\nreq.body.username = '   a user    ';\n\nreq.sanitize('comment').escape(); // returns 'a &lt;span&gt;comment&lt;/span&gt;'\nreq.sanitize('username').trim(); // returns 'a user'\n\nconsole.log(req.body.comment); // 'a &lt;span&gt;comment&lt;/span&gt;'\nconsole.log(req.body.username); // 'a user'\n\n```\n\nSanitizes the specified parameter (using 'dot-notation' or array), the parameter will be updated to the sanitized result. Cannot be chained, and will return the result. See [chriso/validator.js](https://github.com/chriso/validator.js) for available sanitizers, or [add your own](#customsanitizers).\n\nIf a sanitizer takes in params, you would call it like `req.sanitize('reqParam').whitelist(['a', 'b', 'c']);`.\n\nIf the parameter is present in multiple places with the same name e.g. `req.params.comment` & `req.query.comment`, they will all be sanitized.\n\n#### req.filter();\nAlias for [req.sanitize()](#reqsanitize).\n\n#### req.sanitizeBody();\nSame as [req.sanitize()](#reqsanitize), but only looks in `req.body`.\n\n#### req.sanitizeQuery();\nSame as [req.sanitize()](#reqsanitize), but only looks in `req.query`.\n\n#### req.sanitizeParams();\nSame as [req.sanitize()](#reqsanitize), but only looks in `req.params`.\n\n#### req.sanitizeHeaders();\nOnly sanitizes `req.headers`. This method is not covered by the general `req.sanitize()`.\n\n### Regex routes\n\nExpress allows you to define regex routes like:\n\n```javascript\napp.get(/\\/test(\\d+)/, function() {});\n```\n\nYou can validate the extracted matches like this:\n\n```javascript\nreq.assert(0, 'Not a three-digit integer.').len(3, 3).isInt();\n```\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n## Contributors\n\n- Christoph Tavan <dev@tavan.de> - Wrap the gist in an npm package\n- @orfaust - Add `validationErrors()` and nested field support\n- @zero21xxx - Added `checkBody` function\n\n## License\n\nCopyright (c) 2010 Chris O'Hara <cohara87@gmail.com>, MIT License\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ctavan/express-validator/issues"
  },
  "_id": "express-validator@2.20.8",
  "_from": "express-validator@"
}
